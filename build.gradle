/*
 *
 *   AstralFlow - Storage utilities for spigot servers.
 *   Copyright (C) 2022 iceBear67
 *
 *   This library is free software; you can redistribute it and/or
 *   modify it under the terms of the GNU Lesser General Public
 *   License as published by the Free Software Foundation; either
 *   version 2.1 of the License, or (at your option) any later version.
 *
 *   This library is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *   Lesser General Public License for more details.
 *
 *   You should have received a copy of the GNU Lesser General Public
 *   License along with this library; if not, write to the Free Software
 *   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301
 *   USA
 */

plugins {
    id 'java'
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id 'java-library'
    id 'io.franzbecker.gradle-lombok' version '5.0.0'
}

group = 'io.ib67'
version = properties.get("version")

allprojects {
    repositories {
        mavenCentral()
        maven {
            name = 'spigotmc-repo'
            url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
        }
        maven {
            name = 'sonatype'
            url = 'https://oss.sonatype.org/content/groups/public/'
        }
        maven {
            url = "https://jitpack.io"
        }
        maven { url "https://repo.dmulloy2.net/repository/public/" }
    }
}

def getCheckedOutGitCommitHash() {
    def gitFolder = "$projectDir/.git/"
    def takeFromHash = 7
    /*
     * '.git/HEAD' contains either
     *      in case of detached head: the currently checked out commit hash
     *      otherwise: a reference to a file containing the current commit hash
     */
    def head = new File(gitFolder + "HEAD").text.split(":") // .git/HEAD
    def isCommit = head.length == 1 // e5a7c79edabbf7dd39888442df081b1c9d8e88fd
    // def isRef = head.length > 1     // ref: refs/heads/master

    if (isCommit) return head[0].trim().take(takeFromHash) // e5a7c79edabb

    def refHead = new File(gitFolder + head[1].trim()) // .git/refs/heads/master
    refHead.text.trim().take takeFromHash
}

def buildDate = new Date().toGMTString()
def buildBy = System.getProperty("user.name")
def commitHash = getCheckedOutGitCommitHash()

dependencies {
    api('com.github.iceBear67:tools:10254f1e10') {
        exclude module: 'testplug'
    }
    compileOnly 'io.netty:netty-all:4.1.75.Final'

    compileOnly 'org.jetbrains:annotations:23.0.0'
    compileOnly 'org.spigotmc:spigot-api:1.18.2-R0.1-SNAPSHOT'
}

dependencies {
    testRuntimeOnly 'io.netty:netty-all:4.1.68.Final'
    testCompileOnly 'org.jetbrains:annotations:23.0.0'
    testImplementation 'org.spigotmc:spigot-api:1.18.2-R0.1-SNAPSHOT'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly group: "com.comphenix.protocol", name: "ProtocolLib", version: "4.8.0";
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    testImplementation 'com.github.seeseemelk:MockBukkit-v1.18:1.24.1' // mock-buukkit 1.18 has some problem
}
lombok {
    version = "1.18.20"
}
import io.franzbecker.gradle.lombok.task.DelombokTask

task delombok(type: DelombokTask, dependsOn: compileJava) {
    ext.outputDir = file("$buildDir/delombok")
    outputs.dir(outputDir)
    sourceSets.main.java.srcDirs.each {
        inputs.dir(it)
        args(it, "-d", outputDir)
    }
    doFirst {
        outputDir.deleteDir()
    }
}
javadoc.options.addStringOption('Xdoclint:none', '-quiet')
javadoc {
    exclude Set.of('**/internal/**', '**/impl/**', '**Impl')
    dependsOn delombok
    source = delombok.outputDir
    failOnError = false
}
def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

test {
    useJUnitPlatform()

}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [
            version   : version,
            buildTime : buildDate,
            buildBy   : (buildBy.equals("runner") || buildBy.equals("icybear")) ? buildBy : "Unknown",
            commitHash: commitHash
    ]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('*') {
        expand props
    }
}

sourceSets {
    main {
        //compileClasspath += sourceSets.storageModule.output
        //runtimeClasspath += sourceSets.storageModule.output
    }
}
shadowJar {
    relocate 'io.ib67.util', 'io.ib67.astralflow.relocate.util'
}
configurations {

}